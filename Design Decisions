Dan Duff (dfduff)
From Alpha:
    Although the implementation of Alpha was fairly straightforward, it did require
    effort to determine the best practices in formulating a baseline for the project.
    By extending the Board interface with the BoardWorker interface, general manipulations
    of the board (such as set/get location could be implemented for all board types.
    (This is the type of variable stored in the BetaGameManager). In addition, in order to
    assign the static coordinate functions to their respective board behaviors, a BiFunction
    lambda variable was assigned to the given board type in game creation. Originally, this
    allowed for the creation of coordinates to throw errors, should they be outside of their
    given coordinate range (such as no negative square coordinates). This was changed for the
    Beta release, as game rules could potentially override these assumptions.

Beta:
    For this implementation, much more of the game functionality was to be determined, such as
    managing game assets and piece movement. The creation and setting of the game manager, and its held board,
    are created by the EscapeGameBuilder, read-in from the configuration file. 
    
    For the creation/implementation of the GameManager
    a Singleton design pattern was used. This was to ensure that all game functionality related
    to the on single board instance, preventing multiple game managers from being used at a given time.
    By using a singleton pattern, the referencing of the game manager became more globalized, but the
    creation and manipulation became centralized to a single instance. While the instance's values can
    be reset by using the GameBuilder, it guarantees that the data within the game is consistent.
    All of these ideas have changed after discussing the model with the professor however.

    In talking with the professor, because there is no shared UI for this project, the implementation of a
    singleton was unnecessary. Instead, all attributes are tied to the class itself, rather than an inner instance.
    This caused board-setting code to be moved from inside the manager to the builder. Regardless, the Manager still
    holds information about the type of Coordinate system and board of the game. 

    Coming to the implementation of pieces, there are four movement types to implement (Orthagonal, Diagonal, Linear,
    Omni). Piece movements depends on the attributes of the given piece, yet they are assigned during the
    reading of the input file. Because of this, all movement rules are encapsulated in lambdas, assigned to piece names,
    and have their movement validated based on the moving piece's attributes and the board setup. This is all represented 
    in the PieceData class, which holds a list of attributes and the lambda function movement pattern for a given piece. 
    Piece names are mapped to PieceData in the form of a Hashmap in the game manager, with entries being added in during the
    creation of the game manager.


    When defining the specifics of a move, an abstract Coordinate2D class was added and extended by all current Coordinate subclasses. 
    This allowed all 2D coordinates to have getters for their X and Y values (so as to be compared in movement validity checks).

    With the ability to access 2D coordinate information, an AStar implementation finds the shortest path based on
    the Coordinate's distanceTo method as a heuristic. Due to the fact that most movement types differed in the way
    neighbors were analyzed, another Neighbor functional interface was developed to represent the isNeighbor method
    used by the algorithm. This checks to make sure that a given change in coordinates is valid for the given movement type.
    Other than linear, the neighbor algorithm is they key defining feature between piece movements
    (including hex boards).

    When finding errors during parsing, an EscapeException is thrown from the gameBuilder. This would occur when reading
    a diagonally moving piece onto a hex board, for example. All other validity tests are done at the start of a piece's
    movement, which includes the functionality of physically moving/removing the pieces.

Gamma:
    Based on the feedback from the Beta release, I decided to refactor code within the movement class. Because there was
    more variability in the boolean check of valid neighbors during the AStar versus the method by which neighbors are gathered,
    The Neighbors functional interface method was changed to a boolean method, taking in only the relative change in x and y.
    The AStar implementation in the movement class (As well as all the movement validity checks during the AStar process)
    were moved to the Pathfinding class the avoid clutter and separate the movement helpers from the Enum definitions.

    GameObservers were a new addition to the final Escape release, however an implementation was not required for submission.
    For testing purposes a TestGameObserver class was created. This implementation's notify methods simply print the error to
    System.out, and have the gotError boolean variable set (as a way to check if anything was received during tests)