Dan Duff (dfduff) Beta Release TOTO
1. Create an implementation of EscapeGameManager (EGM): BetaGameManager
    2. Implementation reads coordinate system and creates an appropriate object
        makeGameManager -> ((BetaGameManager)emg): not Null
    3. The Correct Coordinate Type and board size is produced from the manager based on the input file
       (checking to ensure that typing is being properly assigned)
        EGM.makeGameManager(square|ortho|hex game files)
        EGM.makeCoordinate() // method to make a coordinate
            manager.setBoardDimensions(GI.getCoordinateType(), GI.getXMax, GI.getYMax)
            instanceof SquareCoordinate | OrthoSquareCoordinate | HexCoordinate: True
        EGM.getBoard() // method to return the correct board type
            instanceof SquareBoard | OrthoSquareBoard | HexBoard: True
        4. Ensure that information that is parsed by the file is being assigned correctly
            BetaGameManager(SQUARE, 18, 19) // Inside makeGameManager(file: SquareGame.xml)
                ((SquareBoard)((BetaGameManager)emg).getBoard()).getXMax() == 18: Equals
                ((SquareBoard)((BetaGameManager)emg).getBoard()).getYMax() == 19: Equals
                ((BetaGameManager)emg).getCoordID() == SQUARE: Equals

            BetaGameManager(SQUARE, 18, 19) // Inside makeGameManager(file: OrthoSquareGame.xml)
                BetaGameManager.setBoardDimensions(ORTHOSQUARE, 20, 25)
                ((OrthoSquareBoard)((BetaGameManager)emg).getBoard()).getXMax() == 20: Equals
                ((OrthoSquareBoard)((BetaGameManager)emg).getBoard()).getYMax() == 25: Equals
                ((BetaGameManager)emg).getCoordID() == ORTHOSQUARE: Equals

    5. Placing the locations on the board from the input game file (default location type is CLEAR)
        EGM.makeGameManager(file: SquareGame.xml)
            ((BetaGameManager)emg).getBoard().getLocationType(3, 4) == CLEAR: Equals
            ((BetaGameManager)emg).getBoard().getLocationType(5, 6) == BLOCK: Equals
            ((BetaGameManager)emg).getBoard().getLocationType(8, 8) == CLEAR: Equals
        6. If no location initializers are found, have every space as CLEAR
            EGM.makeGameManager(file: BareGame.xml)
                ((BetaGameManager)emg).getBoard().getLocationType(3, 4) == CLEAR: Equals
                ((BetaGameManager)emg).getBoard().getLocationType(5, 6) == CLEAR: Equals
                ((BetaGameManager)emg).getBoard().getLocationType(8, 8) == CLEAR: Equals
        7. Throw an error if a read-in location coordinate is outside board
            EGM.makeGameManager(file: LocationOutsideBoard.xml): Throw Error // coordinate (25, 26) on 20X20 board

    8. Placing pieces and onto the board and getting them using the board's get/set piece system (ignoring attributes)
        EGM.makeGameManager(square | ortho | hex)
            ((BetaGameManager)emg).getBoard().putPieceAt(EP.makePiece(PLAYER1, HORSE), (3, 4))
            emg.getPieceAt((3, 4)).getName == HORSE: Equals
            emg.getPieceAt((3, 4)).getPlayer == PLAYER1: Equals

        EGM.makeGameManager(file: SquareGame.xml)
            emg.getPieceAt((3, 4)).getName == HORSE: Equals
            emg.getPieceAt((3, 4)).getPlayer == PLAYER1: Equals

    9. Reading in pieces with attributes (get Bool/Int Attributes) //unset attributes should be their default values
         EGM.makeGameManager(file: SquareGame.xml)
            ((BetaGameManager)emg).getIntPieceAttribute(HORSE, DISTANCE) == 10: Equals
            ((BetaGameManager)emg).getIntPieceAttribute(FROG, DISTANCE) ==  5: Equals
            (BetaGameManager)emg).getIntPieceAttribute(FROG, FLY) == 0: Equals

         EGM.makeGameManager(file: SquareGame.xml)
            ((BetaGameManager)emg).getBoolPieceAttribute(FROG, UNBLOCK): False
            ((BetaGameManager)emg).getBoolPieceAttribute(HORSE, UNBLOCK): True

         10. Error should be thrown if the piece being queried does not exist in the hashmap
            EGM.makeGameManager(file: SquareGame.xml)
                ((BetaGameManager)emg).getBoolPieceAttribute(SNAIL, UNBLOCK): Throw Exception // piece not defined
                ((BetaGameManager)emg).getIntPieceAttribute(FOX, FLY): Throw Exception
                ((BetaGameManager)emg).getPieceMovePattern(FOX): Throw Exception


11. Implement the Manager's canMove method
    12. Create an ASTAR algorithm for pathfinding within the board.
        13. Add check for BLOCK feature
            Skip if UNBLOCK is true. Return true by default if no block
            isUNBLOCKED(FROG, 5, 6): False // Does not have the unblock attribute
            isUNBLOCKED(HORSE, 5, 6): True // Has unblock attribute

        14. AStar Pathfinding
            15. The differences between movement types are the collection of neighbors
                16. Orthogonal Neighbors (above, below, left, right)
                    addOrthagonalNeighborsToOpenList((3, 4)) -> (2, 4), (4, 4), (3, 2), (3, 5))
                    addOrthagonalNeighborsToOpenList((1, 1)) -> (1, 2), (2, 1)) // Works on corners cases
                17. Orthogonal Path is valid and within distance
                    CanMove((2, 3), (4, 2))
                    getPath(FROG(ORTHO | distance: 5), (2, 3)->(4, 2))-> (2, 2), (2, 1), (3, 1), (4, 1), (4, 2): True
                    getPath(HORSE(ORTHO | distance: 3), (1, 2)->(4, 2))-> null : False
                        BLOCK @ (3, 2), (3, 3), (3, 4)

                18. A piece can only be jumped over if attribute is set, and can only add neighbors that are along the same
                        vector (Orthogonal example) on square board
                            canMove((10, 10) -> (10, 12)) (canJump within)
                                Piece @ (10, 11)
                                FROG: ORTHO | Distance 2 w/Jump: True
                                HORSE: ORTHO | Distance 2 no Jump: False

                        19. Cannot change directions mid-jump
                            canMove((2, 3) -> (3, 4)): False
                                FROG: Distance 2 w/Jump: True
                                BLOCK @ (3, 3)

                20. Add diagonal neighbor functionality (same as above, but with corners instead of adjacent squares)
                    Standard:
                        CanMove((5, 3)->(6, 6))
                            SNAIL: DIAG| Distance 3: True
                        CanMove((7, 3)->(6, 6))
                             FROG: DIAG | Distance 2 block: False
                         CanMove((7, 3)->(7, 4))
                              FROG: DIAG | Distance 2 block: False

                    BLOCKING:
                        BLOCK @ (3, 3), (3, 4)
                        CanMove((2, 2)->(4, 4))
                            FROG: DIAG | Distance 2 block: False
                        CanMove((2, 3)->(4, 5))
                             HORSE: DIAG | Distance 2 unblock: True

                    JUMPING:
                        Piece @ (2, 7), (3, 7)
                        CanMove((3, 8)->(1, 6))
                            FROG: DIAG | Distance 2 jump: True
                        CanMove((4, 8)->(2, 6))
                             HORSE: DIAG | Distance 2 no jump: False


