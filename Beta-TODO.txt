Dan Duff (dfduff) Beta Release TOTO
1. Create an implementation of EscapeGameManager (EGM): BetaGameManager
    2. Implementation reads coordinate system and creates an appropriate object
        makeGameManager -> ((BetaGameManager)emg): not Null
    3. The Correct Coordinate Type and board size is produced from the manager based on the input file
       (checking to ensure that typing is being properly assigned)
        EGM.makeGameManager(square|ortho|hex game files)
        EGM.makeCoordinate() // method to make a coordinate
            manager.setBoardDimensions(GI.getCoordinateType(), GI.getXMax, GI.getYMax)
            instanceof SquareCoordinate | OrthoSquareCoordinate | HexCoordinate: True
        EGM.getBoard() // method to return the correct board type
            instanceof SquareBoard | OrthoSquareBoard | HexBoard: True
        4. Ensure that information that is parsed by the file is being assigned correctly
            BetaGameManager(SQUARE, 18, 19) // Inside makeGameManager(file: SquareGame.xml)
                ((SquareBoard)((BetaGameManager)emg).getBoard()).getXMax() == 18: Equals
                ((SquareBoard)((BetaGameManager)emg).getBoard()).getYMax() == 19: Equals
                ((BetaGameManager)emg).getCoordID() == SQUARE: Equals

            BetaGameManager(SQUARE, 18, 19) // Inside makeGameManager(file: OrthoSquareGame.xml)
                BetaGameManager.setBoardDimensions(ORTHOSQUARE, 20, 25)
                ((OrthoSquareBoard)((BetaGameManager)emg).getBoard()).getXMax() == 20: Equals
                ((OrthoSquareBoard)((BetaGameManager)emg).getBoard()).getYMax() == 25: Equals
                ((BetaGameManager)emg).getCoordID() == ORTHOSQUARE: Equals

    5. Placing the locations on the board from the input game file (default location type is CLEAR)
        EGM.makeGameManager(file: SquareGame.xml)
            ((BetaGameManager)emg).getBoard().getLocationType(3, 4) == CLEAR: Equals
            ((BetaGameManager)emg).getBoard().getLocationType(5, 6) == BLOCK: Equals
            ((BetaGameManager)emg).getBoard().getLocationType(8, 8) == CLEAR: Equals
        6. If no location initializers are found, have every space as CLEAR
            EGM.makeGameManager(file: BareGame.xml)
                ((BetaGameManager)emg).getBoard().getLocationType(3, 4) == CLEAR: Equals
                ((BetaGameManager)emg).getBoard().getLocationType(5, 6) == CLEAR: Equals
                ((BetaGameManager)emg).getBoard().getLocationType(8, 8) == CLEAR: Equals
        7. Throw an error if a read-in location coordinate is outside board
            EGM.makeGameManager(file: LocationOutsideBoard.xml): Throw Error // coordinate (25, 26) on 20X20 board

    8. Placing pieces and onto the board and getting them using the board's get/set piece system (ignoring attributes)
        EGM.makeGameManager(square | ortho | hex)
            ((BetaGameManager)emg).getBoard().putPieceAt(EP.makePiece(PLAYER1, HORSE), (3, 4))
            emg.getPieceAt((3, 4)).getName == HORSE: Equals
            emg.getPieceAt((3, 4)).getPlayer == PLAYER1: Equals

        EGM.makeGameManager(file: SquareGame.xml)
            emg.getPieceAt((3, 4)).getName == HORSE: Equals
            emg.getPieceAt((3, 4)).getPlayer == PLAYER1: Equals

    9. Reading in pieces with attributes (get Bool/Int Attributes) //unset attributes should be their default values
         EGM.makeGameManager(file: SquareGame.xml)
            ((BetaGameManager)emg).getIntPieceAttribute(HORSE, DISTANCE) == 10: Equals
            ((BetaGameManager)emg).getIntPieceAttribute(FROG, DISTANCE) ==  5: Equals
            (BetaGameManager)emg).getIntPieceAttribute(FROG, FLY) == 0: Equals

         EGM.makeGameManager(file: SquareGame.xml)
            ((BetaGameManager)emg).getBoolPieceAttribute(FROG, UNBLOCK): False
            ((BetaGameManager)emg).getBoolPieceAttribute(HORSE, UNBLOCK): True

         10. Error should be thrown if the piece being queried does not exist in the hashmap
            EGM.makeGameManager(file: SquareGame.xml)
                ((BetaGameManager)emg).getBoolPieceAttribute(SNAIL, UNBLOCK): Throw Exception // piece not defined
                ((BetaGameManager)emg).getIntPieceAttribute(FOX, FLY): Throw Exception
                ((BetaGameManager)emg).getPieceMovePattern(FOX): Throw Exception


11. Implement the Manager's canMove method
    12. Create an ASTAR algorithm for pathfinding within the board.
        13. Add check for BLOCK feature
            Skip if UNBLOCK is true. Return true by default if no block
            isUNBLOCKED(FROG, 5, 6): False // Does not have the unblock attribute
            isUNBLOCKED(HORSE, 5, 6): True // Has unblock attribute

        14. AStar Pathfinding
            15. The differences between movement types are the collection of neighbors
                16. Orthogonal Neighbors (above, below, left, right)
                    addOrthagonalNeighborsToOpenList((3, 4)) -> (2, 4), (4, 4), (3, 2), (3, 5))
                    addOrthagonalNeighborsToOpenList((1, 1)) -> (1, 2), (2, 1)) // Works on corners cases
                17. Orthogonal Path is valid and within distance
                    CanMove((2, 3), (4, 2))
                    getPath(FROG(ORTHO | distance: 5), (2, 3)->(4, 2))-> (2, 2), (2, 1), (3, 1), (4, 1), (4, 2): True
                    getPath(HORSE(ORTHO | distance: 3), (1, 2)->(4, 2))-> null : False
                        BLOCK @ (3, 2), (3, 3), (3, 4)

                18. A piece can only be jumped over if attribute is set, and can only add neighbors that are along the same
                        vector (Orthogonal example) on square board
                            canMove((10, 10) -> (10, 12)) (canJump within)
                                Piece @ (10, 11)
                                FROG: ORTHO | Distance 2 w/Jump: True
                                HORSE: ORTHO | Distance 2 no Jump: False

                        19. Cannot change directions mid-jump
                            canMove((2, 3) -> (3, 4)): False
                                FROG: Distance 2 w/Jump: True
                                BLOCK @ (3, 3)

                20. Add diagonal neighbor functionality (same as above, but with corners instead of adjacent squares)
                    (SquareBoardDiagTests)
                    Standard:
                        CanMove((5, 3)->(6, 6))
                            SNAIL: DIAG| Distance 3: True
                        CanMove((7, 3)->(6, 6))
                             FROG: DIAG | Distance 2 block: False
                         CanMove((7, 3)->(7, 4))
                              FROG: DIAG | Distance 2 block: False

                    BLOCKING:
                        BLOCK @ (3, 3), (3, 4)
                        CanMove((2, 2)->(4, 4))
                            FROG: DIAG | Distance 2 block: False
                        CanMove((2, 3)->(4, 5))
                             HORSE: DIAG | Distance 2 unblock: True

                    JUMPING:
                        Piece @ (2, 7), (3, 7)
                        CanMove((3, 8)->(1, 6))
                            FROG: DIAG | Distance 2 jump: True
                        CanMove((4, 8)->(2, 6))
                             HORSE: DIAG | Distance 2 no jump: False


                21. Add omni neighbor functionality (SquareBoardOmniTests)
                    Standard:
                        CanMove((2, 2)->(5, 6))
                            SNAIL: OMNI| Distance 4: True
                        CanMove((2, 3)->(5, 7))
                             FROG: OMNI | Distance 2: False

                    BLOCKING:
                        BLOCK @ (7, 1), (7, 2), (7, 3), (9, 3)
                        CanMove((8, 2)->(6, 1))
                            FROG: OMNI | Distance 2 block: False
                        CanMove((8, 3)->(6, 2))
                             HORSE: OMNI | Distance 2 unblock: True

                    JUMPING:
                        Piece @ (8, 3), (7, 6)
                        CanMove((8, 2)->(8, 4))
                            FROG: OMNI | Distance 2 jump: True
                        CanMove((6, 7)->(8, 5))
                             FOX: OMNI | Distance 2 no jump: False


                22. Add Linear functionality (SquareBoardLinearTests)
                    Standard:
                        CanMove((5, 2) -> (5, 7)) // horizontal
                            FROG: LINEAR | Distance 6: True
                        CanMove((5, 2) -> (5, 9)) // horizontal out of range
                            FROG: LINEAR | Distance 6: False
                        CanMove((5, 2) -> (11, 2)) // vertical
                            FROG: LINEAR | Distance 6: True
                        CanMove((5, 2) -> (12, 2)) // vertical out of range
                            FROG: LINEAR | Distance 6: False
                        CanMove((5, 2) -> (1, 6))
                            FROG: LINEAR | Distance 6: True // Diagonal
                        CanMove((5, 2) -> (12, 9))
                            FROG: LINEAR | Distance 6: False // Diagonal out of range
                        CanMove((5, 2) -> (4, 4))
                            FROG: LINEAR | Distance 6: False // Cannot Change direction mid-movement

                    BLOCKING:
                        BLOCK @ (3, 2),
                        CanMove((5, 2) -> (2, 2))
                            FROG: LINEAR | Distance 6 no unblock: False
                        CanMove((3, 1) -> (3, 4))
                            HORSE: LINEAR | Distance 6 unblock: True

                    JUMPING:
                        Piece @ (3, 1), (10, 10)
                        CanMove((1, 1)->(6, 1))
                            HORSE: LINEAR | Distance 6 no jump: False
                         CanMove((8, 8) -> (12, 12))
                            FROG: LINEAR | Distance 6 with jump: True

    23. Add Fly attribute check
        SquareBoards: (FlyTests)
            CanMove(5, 5) -> (1, 1)
                FOX: OMNI | Fly 4: True
            CanMove(5, 5) -> (5, 1)
                BLOCK @ (5, 4), (5, 3), (5, 2)
                FOX: OMNI | Fly 4: True // Can move over blocked locations
            CanMove(5, 6) -> (8, 7)
                Piece @ (7, 5), (7, 6), (7, 7), (6, 5), (6, 6), (6, 7)
                HORSE: OMNI | Fly 3: True // can move across multiple other pieces consecutively
            CanMove((3, 6) -> (6, 3))
                BLOCK @ (5, 4)
                SNAIL: DIAGONAL | Fly 3: true //Can fly across even with only diagonal
            CanMove((3, 6) -> (6, 4))
                BLOCK @ (5, 4)
                SNAIL: DIAGONAL | Fly 3: False //Still invalid diagonal

    24. Test different movements on different boards (higher-level tests confirming previous results)
        MovementReadinTests:
            25. Orthogonal works for only OrthoSquare and Square boards
                egm.makeGameManager(Ortho on Ortho): True
                egm.makeGameManager(Ortho on Square): True
                egm.makeGameManager(Ortho on Hex): Throw Exception

            26. Diagonal movements only works for square boards
                egm.makeGameManager(Diagonal on Ortho): Throw Exception
                egm.makeGameManager(Diagonal on Square): True
                egm.makeGameManager(Diagonal on Hex): Throw Exception

            27. Omni works for all cases
                egm.makeGameManager(Omni on Ortho): True (acts like orthogonal on ortho boards)
                    canMove((11, 11)- >(14, 14))
                        SNAIL: OMNI | Distance 3: False
                egm.makeGameManager(Omni on Square): True
                egm.makeGameManager(Omni on Hex): True
                    canMove((0, 0) -> (2, 1)
                        Piece @ (0, 1), (1, 0)
                        FROG: OMNI | Distance 3: True
                    canMove((-1, 2) -> (0, -2)
                        FROG: OMNI | Distance 3: False // not in-range

            28. Linear works on all cases
                egm.makeGameManager(Linear on Ortho): True
                egm.makeGameManager(Linear on Square): True
                egm.makeGameManager(Linear on Hex): True
                    canMove((-1, -1)->(2, -1))
                        HORSE: LINEAR | Distance 4: True
                    canMove((-1, -1)->(-1, 1))
                        HORSE: LINEAR | Distance 4: True
                    canMove((-1, -1)->(1, -2))
                        HORSE: LINEAR | Distance 4: False // not linear movement


    29. General Failing movements/scenarios (for all) fail = false
        30. Should fail when moving onto block
            BLOCK @ (3, 4)
            canMove((3, 1)->(3, 4))
                FROG: ORTHOGONAL | Distance 7: False

        31. Should fail when moving onto piece of same player
            Piece @ (5, 1) (Same Player), (1, 1) (Different Player)
            canMove((3, 1)->(5, 1))
                FROG: ORTHOGONAL | Distance 7: False
            canMove((3, 1)->(1, 1))
                 FROG: ORTHOGONAL | Distance 7: True

        32. Should fail moving to same coordinate
            canMove((3, 1)->(3, 1))
                FROG: ORTHOGONAL | Distance 7: False

        33. Check to ensure FLY or distance is defined (only one though)
            egm.makeGameManager(No Distance or Fly defined for FROG): Throw Error
            egm.makeGameManager(Both Distance and Fly defined for FROG): Throw Error

        34. Piece should move when move method is run
            getPieceAt(12, 12) == FROG
            getPieceAt(12, 11) == null
            canMove((12, 12)->(12, 11))
            getPieceAt(12, 12) == null
            getPieceAt(12, 11) == FROG

        35. Piece should be removed on the exit location
            EXIT @ (12, 17)
            getPieceAt(12, 12) == FROG
            canMove((12, 12)->(12, 17))
            getPieceAt(12, 12) == null
            getPieceAt(12, 17) == null

        36. Enemy piece should be removed if captured
            getPieceAt(12, 12) == FROG (player 1)
            getPieceAt(12, 15) == FROG (player 2)
            canMove((12, 12)->(12, 15))
            getPieceAt(12, 12) == null
            getPieceAt(12, 15) == FROG (player 1)

        37. Should throw error when placing piece that is not defined
            egm.makeGameManager(NoPieceRuleDefined): Throw Error
                (FROG placed, but no rules defined)
